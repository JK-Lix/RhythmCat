<ENUM>
<NAME>RCPluginType</NAME>
typedef enum RCPluginType
{
    PLUGIN_TYPE_MODULE = 1,
    PLUGIN_TYPE_PYTHON = 2
}RCPluginType;
</ENUM>
<USER_FUNCTION>
<NAME>module_init</NAME>
<RETURNS>gint </RETURNS>

</USER_FUNCTION>
<USER_FUNCTION>
<NAME>module_exit</NAME>
<RETURNS>void </RETURNS>

</USER_FUNCTION>
<USER_FUNCTION>
<NAME>module_get_group_name</NAME>
<RETURNS>const gchar *</RETURNS>

</USER_FUNCTION>
<FUNCTION>
<NAME>rc_plugin_init</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_search_dir</NAME>
<RETURNS>gboolean </RETURNS>
const gchar * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_get_list</NAME>
<RETURNS>const GSList *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_list_free</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_plugin_free</NAME>
<RETURNS>void </RETURNS>
RCPluginData * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_module_free</NAME>
<RETURNS>void </RETURNS>
RCModuleData * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_module_check_running</NAME>
<RETURNS>gboolean </RETURNS>
const gchar * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_load</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *, RCPluginData ** 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_module_load</NAME>
<RETURNS>gboolean </RETURNS>
const gchar * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_module_close</NAME>
<RETURNS>void </RETURNS>
const gchar * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_module_configure</NAME>
<RETURNS>gboolean </RETURNS>
const gchar * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_python_load</NAME>
<RETURNS>gboolean </RETURNS>
const gchar * 
</FUNCTION>
<FUNCTION>
<NAME>rc_plugin_python_configure</NAME>
<RETURNS>gboolean </RETURNS>
const gchar * 
</FUNCTION>
<STRUCT>
<NAME>RCMusicMetaData</NAME>
typedef struct RCMusicMetaData {
    gint64 length;
    gchar *uri;
    guint tracknum;
    guint bitrate;
    gint samplerate;
    gint channels;
    gint eos;
    gint list2_index;
    gchar *title;
    gchar *artist;
    gchar *album;
    gchar *comment;
    gchar *file_type;
    GstBuffer *image;
    gboolean audio_flag;
    gboolean video_flag;
    GtkTreeRowReference *reference;
    GtkListStore *store;
    gpointer user_data;
}RCMusicMetaData;
</STRUCT>
<FUNCTION>
<NAME>rc_tag_read_metadata</NAME>
<RETURNS>RCMusicMetaData *</RETURNS>
const gchar *uri 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_free</NAME>
<RETURNS>void </RETURNS>
RCMusicMetaData *mmd 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_set_playing_metadata</NAME>
<RETURNS>void </RETURNS>
const RCMusicMetaData *mmd 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_get_playing_metadata</NAME>
<RETURNS>const RCMusicMetaData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_get_name_from_fpath</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_tag_find_file</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *dirname, const gchar *str, const gchar *extname 
</FUNCTION>
<STRUCT>
<NAME>RCLyricData</NAME>
typedef struct RCLyricData {
    guint64 time;
    guint64 length;
    gchar *text;
}RCLyricData;
</STRUCT>
<FUNCTION>
<NAME>rc_lrc_read_from_file</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_clean_data</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_lrc_data</NAME>
<RETURNS>const GList *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_text_data</NAME>
<RETURNS>const gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_lrc_get_line_by_time</NAME>
<RETURNS>const RCLyricData *</RETURNS>
gint64 time 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_plugin_window_create</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<USER_FUNCTION>
<NAME>RCMsgAsyncQueueWatchFunc</NAME>
<RETURNS>void </RETURNS>
gpointer item, gpointer data
</USER_FUNCTION>
<ENUM>
<NAME>RCMsgType</NAME>
typedef enum RCMsgType {
    MSG_TYPE_EMPTY = 0,
    MSG_TYPE_TEST = 1,
    MSG_TYPE_PL_INSERT = 2,
    MSG_TYPE_PL_REFRESH = 3,
    MSG_TYPE_PL_REMOVE = 4
}RCMsgType;
</ENUM>
<STRUCT>
<NAME>RCMsgData</NAME>
typedef struct RCMsgData {
    RCMsgType type;
    gpointer data;
}RCMsgData;
</STRUCT>
<FUNCTION>
<NAME>rc_msg_async_queue_watch_new</NAME>
<RETURNS>guint </RETURNS>
GAsyncQueue *queue, gint priority, RCMsgAsyncQueueWatchFunc callback, gpointer data, GDestroyNotify notify, GMainContext *context 
</FUNCTION>
<FUNCTION>
<NAME>rc_msg_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_msg_push</NAME>
<RETURNS>void </RETURNS>
RCMsgType type, gpointer data 
</FUNCTION>
<MACRO>
<NAME>DEBUG_MODE</NAME>
#define DEBUG_MODE FALSE
</MACRO>
<FUNCTION>
<NAME>rc_debug_get_flag</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_set_mode</NAME>
<RETURNS>void </RETURNS>
gboolean mode 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_print</NAME>
<RETURNS>gint </RETURNS>
const gchar *format, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_debug_perror</NAME>
<RETURNS>gint </RETURNS>
const gchar *format, ... 
</FUNCTION>
<STRUCT>
<NAME>RCCoreData</NAME>
typedef struct RCCoreData {
    GstElement *playbin;
    GstElement *audio_sink;
    GstElement *eq_plugin;
    GstElement *vol_plugin;
    guint ver_major;
    guint ver_minor;
    guint ver_micro;
    guint ver_nano;
}RCCoreData;
</STRUCT>
<FUNCTION>
<NAME>rc_core_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_data</NAME>
<RETURNS>RCCoreData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_uri</NAME>
<RETURNS>void </RETURNS>
const gchar *uri 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_uri</NAME>
<RETURNS>gchar *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_play</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_pause</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_stop</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_volume</NAME>
<RETURNS>gboolean </RETURNS>
gdouble volume 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_play_position</NAME>
<RETURNS>gboolean </RETURNS>
gint64 time 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_play_position_by_persent</NAME>
<RETURNS>gboolean </RETURNS>
gdouble persent 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_play_position</NAME>
<RETURNS>gint64 </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_music_length</NAME>
<RETURNS>gint64 </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_volume</NAME>
<RETURNS>gdouble </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_set_eq_effect</NAME>
<RETURNS>void </RETURNS>
gdouble *fq 
</FUNCTION>
<FUNCTION>
<NAME>rc_core_get_play_state</NAME>
<RETURNS>GstState </RETURNS>
 
</FUNCTION>
<MACRO>
<NAME>MAX_DIR_DEPTH</NAME>
#define MAX_DIR_DEPTH 5
</MACRO>
<FUNCTION>
<NAME>rc_gui_about_player</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_show_message_dialog</NAME>
<RETURNS>void </RETURNS>
GtkMessageType, const gchar *, const gchar *, ... 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_show_open_dialog</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_open_music_directory</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_save_playlist_dialog</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_load_playlist_dialog</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_save_all_playlists_dialog</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<STRUCT>
<NAME>RCGuiEQData</NAME>
typedef struct RCGuiEQData {
    GtkWidget *eq_combobox;
    GtkWidget *eq_scales[10];
    GtkWidget *eq_labels[10];
    GtkWidget *db_labels[3];
    GtkWidget *save_button;
    GtkWidget *import_button;
}RCGuiEQData;
</STRUCT>
<FUNCTION>
<NAME>rc_gui_init_eq_data</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_eq_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_create_equalizer</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_eq_get_data</NAME>
<RETURNS>RCGuiEQData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_refresh</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_set_color_style</NAME>
<RETURNS>void </RETURNS>
const RCGuiColorStyle * 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_get_color_style</NAME>
<RETURNS>const RCGuiColorStyle *</RETURNS>
gint 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_style_set_color_style_by_index</NAME>
<RETURNS>void </RETURNS>
gint 
</FUNCTION>
<ENUM>
<NAME>RCPlist1Column</NAME>
typedef enum RCPlist1Column {
    PLIST1_STATE = 0,
    PLIST1_NAME = 1,
    PLIST1_STORE = 2,
    PLIST1_LAST = 3
}RCPlist1Column;
</ENUM>
<ENUM>
<NAME>RCPlist2Column</NAME>
typedef enum RCPlist2Column {
    PLIST2_URI = 0,
    PLIST2_STATE = 1,
    PLIST2_TITLE = 2,
    PLIST2_ARTIST = 3,
    PLIST2_ALBUM = 4,
    PLIST2_LENGTH = 5,
    PLIST2_TRACKNO = 6,
    PLIST2_LAST = 7
}RCPlist2Column;
</ENUM>
<FUNCTION>
<NAME>rc_plist_init</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_insert_list</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *listname, gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_insert_music</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *uri, gint list1_index, gint list2_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_insert_item</NAME>
<RETURNS>void </RETURNS>
const gchar *uri, const gchar *title, const gchar *artist, const gchar *album, gint64 length, gint trackno, GtkListStore *store, gint list2_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_refresh_item</NAME>
<RETURNS>void </RETURNS>
const gchar *uri, const gchar *title, const gchar *artist, const gchar *album, gint64 length, gint trackno, GtkTreeRowReference *reference 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_remove_item</NAME>
<RETURNS>void </RETURNS>
GtkTreeRowReference *reference 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_remove_list</NAME>
<RETURNS>gboolean </RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list1_name</NAME>
<RETURNS>gchar *</RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list1_length</NAME>
<RETURNS>gint </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_set_list1_name</NAME>
<RETURNS>void </RETURNS>
gint index, const gchar *name 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list2_length</NAME>
<RETURNS>gint </RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_by_index</NAME>
<RETURNS>gboolean </RETURNS>
gint list_index, gint music_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_get_index</NAME>
<RETURNS>gboolean </RETURNS>
gint *index1, gint *index2 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_stop</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_prev</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_play_next</NAME>
<RETURNS>gboolean </RETURNS>
gboolean flag 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_set_play_mode</NAME>
<RETURNS>void </RETURNS>
gint repeat, gint random 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_play_mode</NAME>
<RETURNS>void </RETURNS>
gint *repeat, gint *random 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_playlist_setting</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_save_playlist_setting</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_build_default_list</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_plist_move2</NAME>
<RETURNS>void </RETURNS>
gint list_index, GtkTreePath **from_paths, gint f_length, gint to_list_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_save_playlist</NAME>
<RETURNS>void </RETURNS>
const gchar *s_filename, gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_playlist</NAME>
<RETURNS>void </RETURNS>
const gchar *s_filename, gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list_store</NAME>
<RETURNS>GtkListStore *</RETURNS>
gint index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_get_list_head</NAME>
<RETURNS>GtkListStore *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_list2_refresh</NAME>
<RETURNS>gboolean </RETURNS>
gint list1_index 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_import_job_get_length</NAME>
<RETURNS>gint </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_import_job_cancel</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_argument</NAME>
<RETURNS>void </RETURNS>
char *argv[] 
</FUNCTION>
<FUNCTION>
<NAME>rc_plist_load_uri_from_remote</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *uri 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_treeview_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list_tree_reset_list_store</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_popup_menu</NAME>
<RETURNS>gboolean </RETURNS>
GtkWidget *, GdkEventButton *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_popup_menu</NAME>
<RETURNS>gboolean </RETURNS>
GtkWidget *, GdkEventButton *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_button_release_event</NAME>
<RETURNS>gboolean </RETURNS>
GtkWidget *, GdkEventButton *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_row_selected</NAME>
<RETURNS>void </RETURNS>
GtkTreeView *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_row_activated</NAME>
<RETURNS>void </RETURNS>
GtkTreeView *, GtkTreePath *, GtkTreeViewColumn *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_select_list1</NAME>
<RETURNS>void </RETURNS>
gint 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_select_list2</NAME>
<RETURNS>void </RETURNS>
gint 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_new_list</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_delete_list</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list_model_inserted</NAME>
<RETURNS>void </RETURNS>
GtkTreeModel *, GtkTreePath *, GtkTreeIter *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_get_index</NAME>
<RETURNS>gint </RETURNS>
GtkTreeIter * 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_get_selected_index</NAME>
<RETURNS>gint </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_dnd_data_received</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, GdkDragContext *, gint, gint, GtkSelectionData *, guint, guint, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_dnd_data_get</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, GdkDragContext *, GtkSelectionData *, guint, guint, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_dnd_motion</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, GdkDragContext *, gint, gint, guint, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_dnd_data_received</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, GdkDragContext *, gint, gint, GtkSelectionData *, guint, guint, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_dnd_data_get</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, GdkDragContext *, GtkSelectionData *, guint, guint, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_delete_lists</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list2_select_all</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_edited</NAME>
<RETURNS>void </RETURNS>
GtkCellRendererText *, gchar *, gchar *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_list1_rename_list</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<STRUCT>
<NAME>RCGuiData</NAME>
typedef struct RCGuiData {
    GtkUIManager *main_ui;
    GtkActionGroup *main_action_group;
    GtkWidget *main_window;
    GtkWidget *eq_vbox;
    GtkWidget *plist_notebook;
    GtkWidget *title_label, *artist_label, *album_label;
    GtkWidget *time_label, *length_label, *info_label;
    GtkWidget *album_image, *album_eventbox, *album_frame;
    GtkWidget *control_images[4], *control_buttons[4];
    GtkWidget *volume_button;
    GtkWidget *time_scroll_bar;
    GtkWidget *lrc_label, *lrc_viewport;
    GtkWidget *list1_tree_view, *list2_tree_view;
    GtkWidget *list1_scr_window, *list2_scr_window;
    GtkWidget *status_hbox, *status_progress, *status_label;
    GtkWidget *status_cancel_button;
    GtkWidget *list_hpaned;
    GtkTreeModel *list1_tree_model, *list2_tree_model;
    GtkTreeSelection *list1_selection, *list2_selection;
    GtkCellRenderer *renderer_text[5];
    GtkCellRenderer *renderer_pixbuf[2];
    GtkAdjustment *lrc_vport_adj;
    guint main_window_width;
    guint main_window_height;
    guint status_task_length;
    gboolean update_seek_scale_flag;
    guint time_info_refresh_timeout;
    GtkTreeRowReference *list1_selected_reference;
    GdkPixbuf *no_cover_image;
    GdkPixbuf *icon_image;
    GtkStatusIcon *tray_icon;
}RCGuiData;
</STRUCT>
<FUNCTION>
<NAME>rc_gui_get_data</NAME>
<RETURNS>RCGuiData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_init</NAME>
<RETURNS>gboolean </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_quit_player</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_music_info_set_data</NAME>
<RETURNS>void </RETURNS>
const gchar *title, const gpointer data 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_time_label_set_text</NAME>
<RETURNS>void </RETURNS>
gint64 time 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_play_button_state</NAME>
<RETURNS>void </RETURNS>
gboolean state 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_seek_scaler_disable</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_seek_scaler_enable</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_volume</NAME>
<RETURNS>void </RETURNS>
gdouble 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_player_mode</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_cover_image_by_file</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_set_cover_image_by_buf</NAME>
<RETURNS>gboolean </RETURNS>
const GstBuffer *buf 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_status_task_set</NAME>
<RETURNS>void </RETURNS>
guint type, guint len 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_status_progress_set_progress</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_view_add_page</NAME>
<RETURNS>guint </RETURNS>
const gchar *name, const gchar *title, GtkWidget *widget 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_view_remove_page</NAME>
<RETURNS>gboolean </RETURNS>
guint id 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_get_data</NAME>
<RETURNS>RCGuiMiniData *</RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_info_text</NAME>
<RETURNS>void </RETURNS>
const gchar *text 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_lyric_text</NAME>
<RETURNS>void </RETURNS>
const gchar *text 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_info_text_move</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_lyric_persent</NAME>
<RETURNS>void </RETURNS>
gdouble persent 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_play_state</NAME>
<RETURNS>void </RETURNS>
gboolean state 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_set_time_text</NAME>
<RETURNS>void </RETURNS>
gint64 pos 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_window_hide</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_window_show</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_mini_mode_clicked</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_mini_normal_mode_clicked</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_create_setting_window</NAME>
<RETURNS>void </RETURNS>
GtkWidget *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_create_setting_treeview</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_close_setting_window</NAME>
<RETURNS>void </RETURNS>
GtkButton *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_setting_row_selected</NAME>
<RETURNS>void </RETURNS>
GtkTreeView *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_setting_apply</NAME>
<RETURNS>void </RETURNS>
GtkButton *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_setting_confirm</NAME>
<RETURNS>void </RETURNS>
GtkButton *, gpointer 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_create_setting_general</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_create_setting_playlist</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_gui_create_setting_appearance</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_init</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_exit</NAME>
<RETURNS>void </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_string</NAME>
<RETURNS>gchar *</RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_integer</NAME>
<RETURNS>gint </RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_double</NAME>
<RETURNS>gdouble </RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_boolean</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *group_name, const gchar *key, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_string_list</NAME>
<RETURNS>gchar **</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_boolean_list</NAME>
<RETURNS>gboolean *</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_integer_list</NAME>
<RETURNS>gint *</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_double_list</NAME>
<RETURNS>gdouble *</RETURNS>
const gchar *group_name, const gchar *key, gsize *length, GError **error 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_string</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, const gchar *string 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_boolean</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gboolean value 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_integer</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gint value 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_double</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gdouble value 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_string_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, const gchar * const list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_boolean_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gboolean list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_integer_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gint list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_set_double_list</NAME>
<RETURNS>void </RETURNS>
const gchar *group_name, const gchar *key, gdouble list[], gsize length 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_load_setting</NAME>
<RETURNS>gboolean </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_save_setting</NAME>
<RETURNS>void </RETURNS>
const gchar *filename 
</FUNCTION>
<FUNCTION>
<NAME>rc_set_get_plugin_configure</NAME>
<RETURNS>GKeyFile *</RETURNS>
 
</FUNCTION>
