<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="RhythmCat-RCPlayer">
<refmeta>
<refentrytitle role="top_of_page" id="RhythmCat-RCPlayer.top_of_page">Player Object</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  RHYTHMCAT Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Player Object</refname>
<refpurpose>The player object of the player.</refpurpose>
</refnamediv>

<refsynopsisdiv id="RhythmCat-RCPlayer.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#include &lt;player_object.h&gt;

#define             <link linkend="RC-PLAYER-TYPE:CAPS">RC_PLAYER_TYPE</link>
                    <link linkend="RCPlayer">RCPlayer</link>;
                    <link linkend="RCPlayerClass">RCPlayerClass</link>;
<link linkend="RCPlayer"><returnvalue>RCPlayer</returnvalue></link> *          <link linkend="rc-player-new">rc_player_new</link>                       ();
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="rc-player-object-init">rc_player_object_init</link>               ();
<link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           <link linkend="rc-player-object-get">rc_player_object_get</link>                ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-player-object-signal-emit-simple">rc_player_object_signal_emit_simple</link> (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
<link linkend="gulong"><returnvalue>gulong</returnvalue></link>              <link linkend="rc-player-object-signal-connect-simple">rc_player_object_signal_connect_simple</link>
                                                        (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="rc-player-object-signal-disconnect">rc_player_object_signal_disconnect</link>  (<parameter><link linkend="gulong"><type>gulong</type></link> id</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="RhythmCat-RCPlayer.description" role="desc">
<title role="desc.title">Description</title>
<para>
The player object of the player, used in player signal processing.
</para>
</refsect1>
<refsect1 id="RhythmCat-RCPlayer.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="RC-PLAYER-TYPE:CAPS" role="macro">
<title>RC_PLAYER_TYPE</title>
<indexterm zone="RC-PLAYER-TYPE:CAPS"><primary>RC_PLAYER_TYPE</primary></indexterm>
<programlisting>#define RC_PLAYER_TYPE (rc_player_get_type())
</programlisting>
</refsect2>
<refsect2 id="RCPlayer" role="struct">
<title>RCPlayer</title>
<indexterm zone="RCPlayer"><primary>RCPlayer</primary></indexterm>
<programlisting>typedef struct {
    GObject parent;
} RCPlayer;
</programlisting>
<para>
The structure used in object.
</para><variablelist role="struct">
<varlistentry><term><link linkend="GObject"><type>GObject</type></link>&#160;<structfield id="RCPlayer.parent">parent</structfield>;</term>
<listitem><simpara>the parent object
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="RCPlayerClass" role="struct">
<title>RCPlayerClass</title>
<indexterm zone="RCPlayerClass"><primary>RCPlayerClass</primary></indexterm>
<programlisting>typedef struct {
    GObjectClass parent_class;
    void (*player_play)();
    void (*player_stop)();
    void (*player_pause)();
    void (*player_continue)();
    void (*lyric_found)();
    void (*lyric_not_found)();
    void (*cover_found)();
    void (*cover_not_found)();
} RCPlayerClass;
</programlisting>
<para>
Provide signal process functions in the class.
</para><variablelist role="struct">
<varlistentry><term><link linkend="GObjectClass"><type>GObjectClass</type></link>&#160;<structfield id="RCPlayerClass.parent-class">parent_class</structfield>;</term>
<listitem><simpara>parent class, not used
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.player-play">player_play</structfield>&#160;()</term>
<listitem><simpara>the function to call when the player starts playing
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.player-stop">player_stop</structfield>&#160;()</term>
<listitem><simpara>the function to call when the player stopped
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.player-pause">player_pause</structfield>&#160;()</term>
<listitem><simpara>the function to call when the player paused
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.player-continue">player_continue</structfield>&#160;()</term>
<listitem><simpara>the function to call when the player continues playing
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.lyric-found">lyric_found</structfield>&#160;()</term>
<listitem><simpara>the function to call when the lyric data is found
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.lyric-not-found">lyric_not_found</structfield>&#160;()</term>
<listitem><simpara>the function to call when the lyric data is not found
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.cover-found">cover_found</structfield>&#160;()</term>
<listitem><simpara>the function to call when the cover image is found
</simpara></listitem>
</varlistentry>
<varlistentry><term><structfield id="RCPlayerClass.cover-not-found">cover_not_found</structfield>&#160;()</term>
<listitem><simpara>the function to call when the cover image is not found
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-player-new" role="function">
<title>rc_player_new ()</title>
<indexterm zone="rc-player-new"><primary>rc_player_new</primary></indexterm>
<programlisting><link linkend="RCPlayer"><returnvalue>RCPlayer</returnvalue></link> *          rc_player_new                       ();</programlisting>
<para>
Return a new <link linkend="RCPlayer"><type>RCPlayer</type></link> object.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="RCPlayer"><type>RCPlayer</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-player-object-init" role="function">
<title>rc_player_object_init ()</title>
<indexterm zone="rc-player-object-init"><primary>rc_player_object_init</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            rc_player_object_init               ();</programlisting>
<para>
Make a default <link linkend="RCPlayer"><type>RCPlayer</type></link> object for the player. Can be used only once.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Whether the object is made.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-player-object-get" role="function">
<title>rc_player_object_get ()</title>
<indexterm zone="rc-player-object-get"><primary>rc_player_object_get</primary></indexterm>
<programlisting><link linkend="GObject"><returnvalue>GObject</returnvalue></link> *           rc_player_object_get                ();</programlisting>
<para>
Return the default <link linkend="RCPlayer"><type>RCPlayer</type></link> object.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The default <link linkend="RCPlayer"><type>RCPlayer</type></link> object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-player-object-signal-emit-simple" role="function">
<title>rc_player_object_signal_emit_simple ()</title>
<indexterm zone="rc-player-object-signal-emit-simple"><primary>rc_player_object_signal_emit_simple</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_player_object_signal_emit_simple (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
Emit a signal by the given name.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name of the signal
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-player-object-signal-connect-simple" role="function">
<title>rc_player_object_signal_connect_simple ()</title>
<indexterm zone="rc-player-object-signal-connect-simple"><primary>rc_player_object_signal_connect_simple</primary></indexterm>
<programlisting><link linkend="gulong"><returnvalue>gulong</returnvalue></link>              rc_player_object_signal_connect_simple
                                                        (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>);</programlisting>
<para>
Connect the GCallback function to the given signal for the default
<link linkend="RCPlayer"><type>RCPlayer</type></link> object.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the name of the signal
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>the the <link linkend="GCallback"><type>GCallback</type></link> to connect
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The handler ID.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rc-player-object-signal-disconnect" role="function">
<title>rc_player_object_signal_disconnect ()</title>
<indexterm zone="rc-player-object-signal-disconnect"><primary>rc_player_object_signal_disconnect</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                rc_player_object_signal_disconnect  (<parameter><link linkend="gulong"><type>gulong</type></link> id</parameter>);</programlisting>
<para>
Disconnects thg handler from the default <link linkend="RCPlayer"><type>RCPlayer</type></link> object, so it will
not be called during any future or currently ongoing emissions of the
signal it has been connected to. The <parameter>id</parameter> becomes invalid and may be reused.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the handler ID
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
